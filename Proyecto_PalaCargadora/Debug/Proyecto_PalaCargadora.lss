
Proyecto_PalaCargadora.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000b98  00000c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080010c  0080010c  00000c38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010dc  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000971  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1e  00000000  00000000  0000285d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  0000347c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f6  00000000  00000000  000036c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a4  00000000  00000000  00003dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000415e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  9e:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:
 */ 

#include "ADC.h"

void init_ADC(void){
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	// Vref = AVCC = 5V
	ADMUX |= (1<<REFS0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	// Justificado a la izquierda
	ADMUX |= (1<<ADLAR);
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	ADMUX = ((ADMUX & 0xF8)|0x04);
  b8:	80 81       	ld	r24, Z
  ba:	88 7f       	andi	r24, 0xF8	; 248
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	80 83       	st	Z, r24
	ADCSRA = 0;
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
	// Habilitar ADC
	ADCSRA |= (1<<ADEN);
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
	// Máscara de la interrupción del ADC
	ADCSRA |= (1<<ADIE);
  cc:	80 81       	ld	r24, Z
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	80 83       	st	Z, r24
	// Prescaler del ADC a 128
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  d2:	80 81       	ld	r24, Z
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	80 83       	st	Z, r24
	
	ADCSRB = 0;
  d8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	
	DIDR0 |= (1<<ADC4D)|(1<<ADC5D);
  dc:	ae e7       	ldi	r26, 0x7E	; 126
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	8c 91       	ld	r24, X
  e2:	80 63       	ori	r24, 0x30	; 48
  e4:	8c 93       	st	X, r24
	
	// Iniciar primera conversión
	ADCSRA |= (1<<ADSC);
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <mapADC_PWM_Timer1_ServoDelantero>:
	return (uint16_t)(((float)valor_ADC1/255.0)*(217.41-114.95)+114.95);
}

uint16_t mapADC_PWM_Timer1_ServoGiro(uint8_t valor_ADC1){
	return (uint16_t)(((float)valor_ADC1/255.0)*(139.88-94.96)+94.96);
}
  ee:	68 2f       	mov	r22, r24
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatunsisf>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	4f e7       	ldi	r20, 0x7F	; 127
 100:	53 e4       	ldi	r21, 0x43	; 67
 102:	0e 94 14 04 	call	0x828	; 0x828 <__divsf3>
 106:	24 ea       	ldi	r18, 0xA4	; 164
 108:	30 ef       	ldi	r19, 0xF0	; 240
 10a:	46 e8       	ldi	r20, 0x86	; 134
 10c:	52 e4       	ldi	r21, 0x42	; 66
 10e:	0e 94 43 05 	call	0xa86	; 0xa86 <__mulsf3>
 112:	24 ea       	ldi	r18, 0xA4	; 164
 114:	30 ef       	ldi	r19, 0xF0	; 240
 116:	45 e1       	ldi	r20, 0x15	; 21
 118:	53 e4       	ldi	r21, 0x43	; 67
 11a:	0e 94 a8 03 	call	0x750	; 0x750 <__addsf3>
 11e:	0e 94 86 04 	call	0x90c	; 0x90c <__fixunssfsi>
 122:	cb 01       	movw	r24, r22
 124:	08 95       	ret

00000126 <mapADC_PWM_Timer1_ServoElevacion>:
 126:	68 2f       	mov	r22, r24
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatunsisf>
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	4f e7       	ldi	r20, 0x7F	; 127
 138:	53 e4       	ldi	r21, 0x43	; 67
 13a:	0e 94 14 04 	call	0x828	; 0x828 <__divsf3>
 13e:	26 e8       	ldi	r18, 0x86	; 134
 140:	3b ee       	ldi	r19, 0xEB	; 235
 142:	4c ec       	ldi	r20, 0xCC	; 204
 144:	52 e4       	ldi	r21, 0x42	; 66
 146:	0e 94 43 05 	call	0xa86	; 0xa86 <__mulsf3>
 14a:	26 e6       	ldi	r18, 0x66	; 102
 14c:	36 ee       	ldi	r19, 0xE6	; 230
 14e:	45 ee       	ldi	r20, 0xE5	; 229
 150:	52 e4       	ldi	r21, 0x42	; 66
 152:	0e 94 a8 03 	call	0x750	; 0x750 <__addsf3>
 156:	0e 94 86 04 	call	0x90c	; 0x90c <__fixunssfsi>
 15a:	cb 01       	movw	r24, r22
 15c:	08 95       	ret

0000015e <mapADC_PWM_Timer2_ServoGiro>:

uint8_t mapADC_PWM_Timer2_ServoGiro(uint8_t valor_ADC){
	return (uint8_t)(((float)valor_ADC/255)*(14-9)+9);
 15e:	68 2f       	mov	r22, r24
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatunsisf>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	4f e7       	ldi	r20, 0x7F	; 127
 170:	53 e4       	ldi	r21, 0x43	; 67
 172:	0e 94 14 04 	call	0x828	; 0x828 <__divsf3>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	40 ea       	ldi	r20, 0xA0	; 160
 17c:	50 e4       	ldi	r21, 0x40	; 64
 17e:	0e 94 43 05 	call	0xa86	; 0xa86 <__mulsf3>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e1       	ldi	r20, 0x10	; 16
 188:	51 e4       	ldi	r21, 0x41	; 65
 18a:	0e 94 a8 03 	call	0x750	; 0x750 <__addsf3>
 18e:	0e 94 86 04 	call	0x90c	; 0x90c <__fixunssfsi>
 192:	86 2f       	mov	r24, r22
}
 194:	08 95       	ret

00000196 <setup>:
    }
}

void setup(void){
	
	cli();
 196:	f8 94       	cli
	DDRC = 0;
 198:	17 b8       	out	0x07, r1	; 7
	PCMSK1 |= 0x07;
 19a:	ec e6       	ldi	r30, 0x6C	; 108
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	87 60       	ori	r24, 0x07	; 7
 1a2:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);
 1a4:	e8 e6       	ldi	r30, 0x68	; 104
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	80 83       	st	Z, r24
	DDRD |= (1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(1<<DDD2);
 1ae:	8a b1       	in	r24, 0x0a	; 10
 1b0:	84 6f       	ori	r24, 0xF4	; 244
 1b2:	8a b9       	out	0x0a, r24	; 10
	init_PWM1_Fast();
 1b4:	0e 94 09 03 	call	0x612	; 0x612 <init_PWM1_Fast>
	init_PWM2_Fast();
 1b8:	0e 94 35 03 	call	0x66a	; 0x66a <init_PWM2_Fast>
	init_UART9600();
 1bc:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <init_UART9600>
	init_ADC();
 1c0:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	sei();
 1c4:	78 94       	sei
 1c6:	08 95       	ret

000001c8 <main>:
	return (uint8_t)(((float)valor_ADC/255)*(14-9)+9);
}

int main(void)
{
    CLKPR = (1<<CLKPCE);
 1c8:	e1 e6       	ldi	r30, 0x61	; 97
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	80 83       	st	Z, r24
    CLKPR = (1<<CLKPS0); // CLK a 8 MHz
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 83       	st	Z, r24
	setup();
 1d4:	0e 94 cb 00 	call	0x196	; 0x196 <setup>
    while (1) 
    {
		if (modo == 0)
 1d8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <modo>
 1dc:	81 11       	cpse	r24, r1
 1de:	17 c0       	rjmp	.+46     	; 0x20e <main+0x46>
		{
			PORTD |= (1<<PORTD5);
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~((1<<PORTD4)|(1<<PORTD2));
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	8b 7e       	andi	r24, 0xEB	; 235
 1ea:	8b b9       	out	0x0b, r24	; 11
			valor_pot1 = valorADC_pot1;
 1ec:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <valorADC_pot1>
 1f0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <valor_pot1>
			valor_pot2 = valorADC_pot2;
 1f4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <valorADC_pot2>
 1f8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <valor_pot2>
			valor_pot3 = valorADC_pot3;
 1fc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <valorADC_pot3>
 200:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <valor_pot3>
			valor_pot4 = valorADC_pot4;
 204:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <valorADC_pot4>
 208:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <valor_pot4>
 20c:	41 c0       	rjmp	.+130    	; 0x290 <main+0xc8>
		} else if (modo == 1) {
 20e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <modo>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	39 f5       	brne	.+78     	; 0x264 <main+0x9c>
			PORTD |= (1<<PORTD4);
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	80 61       	ori	r24, 0x10	; 16
 21a:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~((1<<PORTD5)|(1<<PORTD2));
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	8b 7d       	andi	r24, 0xDB	; 219
 220:	8b b9       	out	0x0b, r24	; 11
			valor_pot1 = eeprom_read_byte((const uint8_t*) eeprom_pot1_address);
 222:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <eeprom_pot1_address>
 226:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <eeprom_pot1_address+0x1>
 22a:	0e 94 b0 05 	call	0xb60	; 0xb60 <eeprom_read_byte>
 22e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <valor_pot1>
			valor_pot2 = eeprom_read_byte((const uint8_t*) eeprom_pot2_address);
 232:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <eeprom_pot2_address>
 236:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <eeprom_pot2_address+0x1>
 23a:	0e 94 b0 05 	call	0xb60	; 0xb60 <eeprom_read_byte>
 23e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <valor_pot2>
			valor_pot3 = eeprom_read_byte((const uint8_t*) eeprom_pot3_address);
 242:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <eeprom_pot3_address>
 246:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <eeprom_pot3_address+0x1>
 24a:	0e 94 b0 05 	call	0xb60	; 0xb60 <eeprom_read_byte>
 24e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <valor_pot3>
			valor_pot4 = eeprom_read_byte((const uint8_t*) eeprom_pot4_address);
 252:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 256:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25a:	0e 94 b0 05 	call	0xb60	; 0xb60 <eeprom_read_byte>
 25e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <valor_pot4>
 262:	16 c0       	rjmp	.+44     	; 0x290 <main+0xc8>
		} else {
			PORTD |= (1<<PORTD2);
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	84 60       	ori	r24, 0x04	; 4
 268:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~((1<<PORTD4)|(1<<PORTD5));
 26a:	8b b1       	in	r24, 0x0b	; 11
 26c:	8f 7c       	andi	r24, 0xCF	; 207
 26e:	8b b9       	out	0x0b, r24	; 11
			valor_pot1 = valorADAf_pot1;
 270:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <valorADAf_pot1>
 274:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <valor_pot1>
			valor_pot2 = valorADAf_pot2;
 278:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <valorADAf_pot2>
 27c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <valor_pot2>
			valor_pot3 = valorADAf_pot3;
 280:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <valorADAf_pot3>
 284:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <valor_pot3>
			valor_pot4 = valorADAf_pot4;
 288:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <valorADAf_pot4>
 28c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <valor_pot4>
		}
		if (actualizar_eeprom == 1){
 290:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <actualizar_eeprom>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	11 f5       	brne	.+68     	; 0x2dc <main+0x114>
			eeprom_update_byte((uint8_t*) eeprom_pot1_address, valorADC_pot1);
 298:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <valorADC_pot1>
 29c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <eeprom_pot1_address>
 2a0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <eeprom_pot1_address+0x1>
 2a4:	0e 94 b8 05 	call	0xb70	; 0xb70 <eeprom_update_byte>
			eeprom_update_byte((uint8_t*) eeprom_pot2_address, valorADC_pot2);
 2a8:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <valorADC_pot2>
 2ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <eeprom_pot2_address>
 2b0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <eeprom_pot2_address+0x1>
 2b4:	0e 94 b8 05 	call	0xb70	; 0xb70 <eeprom_update_byte>
			eeprom_update_byte((uint8_t*) eeprom_pot3_address, valorADC_pot3);
 2b8:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <valorADC_pot3>
 2bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <eeprom_pot3_address>
 2c0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <eeprom_pot3_address+0x1>
 2c4:	0e 94 b8 05 	call	0xb70	; 0xb70 <eeprom_update_byte>
			eeprom_update_byte((uint8_t*) eeprom_pot4_address, valorADC_pot4);
 2c8:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <valorADC_pot4>
 2cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d4:	0e 94 b8 05 	call	0xb70	; 0xb70 <eeprom_update_byte>
			actualizar_eeprom = 0;
 2d8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <actualizar_eeprom>
		}
		if (bandera_lectura == 1) {
 2dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <main+0x11e>
 2e4:	69 c0       	rjmp	.+210    	; 0x3b8 <main+0x1f0>
			uint8_t i;
			if (mensaje_recibido[0] == 1){
 2e6:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <mensaje_recibido>
 2ea:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <mensaje_recibido+0x1>
 2ee:	80 81       	ld	r24, Z
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	b1 f4       	brne	.+44     	; 0x320 <main+0x158>
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <main+0x138>
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
					writeUART(mensaje_recibido[i]);
 2f6:	80 81       	ld	r24, Z
 2f8:	0e 94 89 03 	call	0x712	; 0x712 <writeUART>
			actualizar_eeprom = 0;
		}
		if (bandera_lectura == 1) {
			uint8_t i;
			if (mensaje_recibido[0] == 1){
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
 2fc:	cf 5f       	subi	r28, 0xFF	; 255
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <main+0x13a>
 300:	c0 e0       	ldi	r28, 0x00	; 0
 302:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <mensaje_recibido>
 306:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <mensaje_recibido+0x1>
 30a:	fd 01       	movw	r30, r26
 30c:	ec 0f       	add	r30, r28
 30e:	f1 1d       	adc	r31, r1
 310:	80 81       	ld	r24, Z
 312:	81 11       	cpse	r24, r1
 314:	f0 cf       	rjmp	.-32     	; 0x2f6 <main+0x12e>
					writeUART(mensaje_recibido[i]);
				}
				valorADAf_pot1 = mensaje_recibido[1];
 316:	11 96       	adiw	r26, 0x01	; 1
 318:	8c 91       	ld	r24, X
 31a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <valorADAf_pot1>
 31e:	4a c0       	rjmp	.+148    	; 0x3b4 <main+0x1ec>
			} else if (mensaje_recibido[0] == 2){
 320:	80 81       	ld	r24, Z
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	b1 f4       	brne	.+44     	; 0x352 <main+0x18a>
 326:	05 c0       	rjmp	.+10     	; 0x332 <main+0x16a>
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
					writeUART(mensaje_recibido[i]);
 328:	80 81       	ld	r24, Z
 32a:	0e 94 89 03 	call	0x712	; 0x712 <writeUART>
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
					writeUART(mensaje_recibido[i]);
				}
				valorADAf_pot1 = mensaje_recibido[1];
			} else if (mensaje_recibido[0] == 2){
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
 32e:	cf 5f       	subi	r28, 0xFF	; 255
 330:	01 c0       	rjmp	.+2      	; 0x334 <main+0x16c>
 332:	c0 e0       	ldi	r28, 0x00	; 0
 334:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <mensaje_recibido>
 338:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <mensaje_recibido+0x1>
 33c:	fd 01       	movw	r30, r26
 33e:	ec 0f       	add	r30, r28
 340:	f1 1d       	adc	r31, r1
 342:	80 81       	ld	r24, Z
 344:	81 11       	cpse	r24, r1
 346:	f0 cf       	rjmp	.-32     	; 0x328 <main+0x160>
					writeUART(mensaje_recibido[i]);
				}
				valorADAf_pot2 = mensaje_recibido[1];
 348:	11 96       	adiw	r26, 0x01	; 1
 34a:	8c 91       	ld	r24, X
 34c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <valorADAf_pot2>
 350:	31 c0       	rjmp	.+98     	; 0x3b4 <main+0x1ec>
			} else if (mensaje_recibido[0] == 3){
 352:	80 81       	ld	r24, Z
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	b1 f4       	brne	.+44     	; 0x384 <main+0x1bc>
 358:	05 c0       	rjmp	.+10     	; 0x364 <main+0x19c>
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
					writeUART(mensaje_recibido[i]);
 35a:	80 81       	ld	r24, Z
 35c:	0e 94 89 03 	call	0x712	; 0x712 <writeUART>
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
					writeUART(mensaje_recibido[i]);
				}
				valorADAf_pot2 = mensaje_recibido[1];
			} else if (mensaje_recibido[0] == 3){
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
 360:	cf 5f       	subi	r28, 0xFF	; 255
 362:	01 c0       	rjmp	.+2      	; 0x366 <main+0x19e>
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <mensaje_recibido>
 36a:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <mensaje_recibido+0x1>
 36e:	fd 01       	movw	r30, r26
 370:	ec 0f       	add	r30, r28
 372:	f1 1d       	adc	r31, r1
 374:	80 81       	ld	r24, Z
 376:	81 11       	cpse	r24, r1
 378:	f0 cf       	rjmp	.-32     	; 0x35a <main+0x192>
					writeUART(mensaje_recibido[i]);
				}
				valorADAf_pot3 = mensaje_recibido[1];
 37a:	11 96       	adiw	r26, 0x01	; 1
 37c:	8c 91       	ld	r24, X
 37e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <valorADAf_pot3>
 382:	18 c0       	rjmp	.+48     	; 0x3b4 <main+0x1ec>
			} else if (mensaje_recibido[0] == 4){
 384:	80 81       	ld	r24, Z
 386:	84 30       	cpi	r24, 0x04	; 4
 388:	a9 f4       	brne	.+42     	; 0x3b4 <main+0x1ec>
 38a:	05 c0       	rjmp	.+10     	; 0x396 <main+0x1ce>
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
					writeUART(mensaje_recibido[i]);
 38c:	80 81       	ld	r24, Z
 38e:	0e 94 89 03 	call	0x712	; 0x712 <writeUART>
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
					writeUART(mensaje_recibido[i]);
				}
				valorADAf_pot3 = mensaje_recibido[1];
			} else if (mensaje_recibido[0] == 4){
				for (i = 0; mensaje_recibido[i] != '\0'; i++){
 392:	cf 5f       	subi	r28, 0xFF	; 255
 394:	01 c0       	rjmp	.+2      	; 0x398 <main+0x1d0>
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <mensaje_recibido>
 39c:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <mensaje_recibido+0x1>
 3a0:	fd 01       	movw	r30, r26
 3a2:	ec 0f       	add	r30, r28
 3a4:	f1 1d       	adc	r31, r1
 3a6:	80 81       	ld	r24, Z
 3a8:	81 11       	cpse	r24, r1
 3aa:	f0 cf       	rjmp	.-32     	; 0x38c <main+0x1c4>
					writeUART(mensaje_recibido[i]);
				}
				valorADAf_pot4 = mensaje_recibido[1];
 3ac:	11 96       	adiw	r26, 0x01	; 1
 3ae:	8c 91       	ld	r24, X
 3b0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <valorADAf_pot4>
			}
			bandera_lectura = 0;
 3b4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		}
		
		dutyCycle1A = mapADC_PWM_Timer1_ServoDelantero(valor_pot3);
 3b8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <valor_pot3>
 3bc:	0e 94 77 00 	call	0xee	; 0xee <mapADC_PWM_Timer1_ServoDelantero>
 3c0:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <dutyCycle1A+0x1>
 3c4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <dutyCycle1A>
		updateDutyCycle1A(dutyCycle1A);
 3c8:	0e 94 2b 03 	call	0x656	; 0x656 <updateDutyCycle1A>
		dutyCylce1B = mapADC_PWM_Timer1_ServoElevacion(valor_pot2);
 3cc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <valor_pot2>
 3d0:	0e 94 93 00 	call	0x126	; 0x126 <mapADC_PWM_Timer1_ServoElevacion>
 3d4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dutyCylce1B+0x1>
 3d8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dutyCylce1B>
		updateDutyCycle1B(dutyCylce1B);
 3dc:	0e 94 30 03 	call	0x660	; 0x660 <updateDutyCycle1B>
		dutyCycle2B = mapADC_PWM_Timer2_ServoGiro(valor_pot1);
 3e0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <valor_pot1>
 3e4:	0e 94 af 00 	call	0x15e	; 0x15e <mapADC_PWM_Timer2_ServoGiro>
 3e8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dutyCycle2B>
		updateDutyCycle2B(dutyCycle2B);
 3ec:	0e 94 51 03 	call	0x6a2	; 0x6a2 <updateDutyCycle2B>
		if (valor_pot4 <= 122){
 3f0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <valor_pot4>
 3f4:	8b 37       	cpi	r24, 0x7B	; 123
 3f6:	88 f4       	brcc	.+34     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			// para atras
			PORTD &= ~(1<<PORTD7);
 3f8:	8b b1       	in	r24, 0x0b	; 11
 3fa:	8f 77       	andi	r24, 0x7F	; 127
 3fc:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1<<PORTD6);
 3fe:	8b b1       	in	r24, 0x0b	; 11
 400:	80 64       	ori	r24, 0x40	; 64
 402:	8b b9       	out	0x0b, r24	; 11
			dutyCycle2A = mapADC_PWM_Timer2((valor_pot4-122)*(-1));
 404:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <valor_pot4>
 408:	8a e7       	ldi	r24, 0x7A	; 122
 40a:	89 1b       	sub	r24, r25
 40c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <mapADC_PWM_Timer2>
 410:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <dutyCycle2A>
			updateDutyCycle2A(dutyCycle2A);
 414:	0e 94 4e 03 	call	0x69c	; 0x69c <updateDutyCycle2A>
 418:	df ce       	rjmp	.-578    	; 0x1d8 <main+0x10>
		} else if (valor_pot4 <= 132){
 41a:	85 38       	cpi	r24, 0x85	; 133
 41c:	38 f4       	brcc	.+14     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			// idle
			PORTD &= ~((1<<PORTD7)|(1<<PORTD6));
 41e:	8b b1       	in	r24, 0x0b	; 11
 420:	8f 73       	andi	r24, 0x3F	; 63
 422:	8b b9       	out	0x0b, r24	; 11
			updateDutyCycle2A(0);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 4e 03 	call	0x69c	; 0x69c <updateDutyCycle2A>
 42a:	d6 ce       	rjmp	.-596    	; 0x1d8 <main+0x10>
		} else {
			// para adelante
			PORTD &= ~(1<<PORTD6);
 42c:	8b b1       	in	r24, 0x0b	; 11
 42e:	8f 7b       	andi	r24, 0xBF	; 191
 430:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1<<PORTD7);
 432:	8b b1       	in	r24, 0x0b	; 11
 434:	80 68       	ori	r24, 0x80	; 128
 436:	8b b9       	out	0x0b, r24	; 11
			dutyCycle2A = mapADC_PWM_Timer2(valor_pot4-133);
 438:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <valor_pot4>
 43c:	85 58       	subi	r24, 0x85	; 133
 43e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <mapADC_PWM_Timer2>
 442:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <dutyCycle2A>
			updateDutyCycle2A(dutyCycle2A);
 446:	0e 94 4e 03 	call	0x69c	; 0x69c <updateDutyCycle2A>
 44a:	c6 ce       	rjmp	.-628    	; 0x1d8 <main+0x10>

0000044c <__vector_4>:
	init_UART9600();
	init_ADC();
	sei();
}

ISR(PCINT1_vect){
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
	if (!(PINC & (1 << PINC0))) // Decrementar
 46e:	30 99       	sbic	0x06, 0	; 6
 470:	23 c0       	rjmp	.+70     	; 0x4b8 <__vector_4+0x6c>
	{
		if (modo == 0){
 472:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <modo>
 476:	81 11       	cpse	r24, r1
 478:	08 c0       	rjmp	.+16     	; 0x48a <__vector_4+0x3e>
			modo = 1;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <modo>
			writeTextUART("1");
 480:	86 e0       	ldi	r24, 0x06	; 6
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 90 03 	call	0x720	; 0x720 <writeTextUART>
 488:	27 c0       	rjmp	.+78     	; 0x4d8 <__vector_4+0x8c>
		} else if (modo == 1){
 48a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <modo>
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	41 f4       	brne	.+16     	; 0x4a2 <__vector_4+0x56>
			modo = 2;
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <modo>
			writeTextUART("2");
 498:	88 e0       	ldi	r24, 0x08	; 8
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 90 03 	call	0x720	; 0x720 <writeTextUART>
 4a0:	1b c0       	rjmp	.+54     	; 0x4d8 <__vector_4+0x8c>
		} else if (modo == 2){
 4a2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <modo>
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	b9 f4       	brne	.+46     	; 0x4d8 <__vector_4+0x8c>
			modo = 0;
 4aa:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <modo>
			writeTextUART("0");
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	0e 94 90 03 	call	0x720	; 0x720 <writeTextUART>
 4b6:	10 c0       	rjmp	.+32     	; 0x4d8 <__vector_4+0x8c>
		}
	}
	else if (!(PINC & (1 << PINC1))) // Incrementar
 4b8:	31 99       	sbic	0x06, 1	; 6
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <__vector_4+0x8c>
	{
		if (modo == 0){
 4bc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <modo>
 4c0:	81 11       	cpse	r24, r1
 4c2:	04 c0       	rjmp	.+8      	; 0x4cc <__vector_4+0x80>
			actualizar_eeprom = 1;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <actualizar_eeprom>
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <__vector_4+0x8c>
		} else if (modo == 2) {
 4cc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <modo>
 4d0:	82 30       	cpi	r24, 0x02	; 2
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__vector_4+0x8c>
			actualizar_eeprom = 2;
 4d4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <actualizar_eeprom>
		}
	}
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <__vector_21>:

ISR(ADC_vect){
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	8f 93       	push	r24
 506:	ef 93       	push	r30
 508:	ff 93       	push	r31
	ADCSRA &= ~(1<<ADEN);
 50a:	ea e7       	ldi	r30, 0x7A	; 122
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	8f 77       	andi	r24, 0x7F	; 127
 512:	80 83       	st	Z, r24
	if (alternador_pots == 0){
 514:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <alternador_pots>
 518:	81 11       	cpse	r24, r1
 51a:	10 c0       	rjmp	.+32     	; 0x53c <__vector_21+0x42>
		valorADC_pot1 = ADCH;
 51c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 520:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <valorADC_pot1>
		ADMUX = ((ADMUX & 0xF8)|0x05);
 524:	ec e7       	ldi	r30, 0x7C	; 124
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	88 7f       	andi	r24, 0xF8	; 248
 52c:	85 60       	ori	r24, 0x05	; 5
 52e:	80 83       	st	Z, r24
		alternador_pots += 1;
 530:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <alternador_pots>
 534:	8f 5f       	subi	r24, 0xFF	; 255
 536:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <alternador_pots>
 53a:	33 c0       	rjmp	.+102    	; 0x5a2 <__vector_21+0xa8>
	} else if (alternador_pots == 1){
 53c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <alternador_pots>
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	81 f4       	brne	.+32     	; 0x564 <__vector_21+0x6a>
		valorADC_pot2 = ADCH;
 544:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 548:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <valorADC_pot2>
		ADMUX = ((ADMUX & 0xF8)|0x06);
 54c:	ec e7       	ldi	r30, 0x7C	; 124
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	88 7f       	andi	r24, 0xF8	; 248
 554:	86 60       	ori	r24, 0x06	; 6
 556:	80 83       	st	Z, r24
		alternador_pots += 1;
 558:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <alternador_pots>
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <alternador_pots>
 562:	1f c0       	rjmp	.+62     	; 0x5a2 <__vector_21+0xa8>
	} else if (alternador_pots == 2){
 564:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <alternador_pots>
 568:	82 30       	cpi	r24, 0x02	; 2
 56a:	79 f4       	brne	.+30     	; 0x58a <__vector_21+0x90>
		valorADC_pot3 = ADCH;
 56c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 570:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <valorADC_pot3>
		ADMUX = ((ADMUX & 0xF8)|0x07);
 574:	ec e7       	ldi	r30, 0x7C	; 124
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	87 60       	ori	r24, 0x07	; 7
 57c:	80 83       	st	Z, r24
		alternador_pots += 1;
 57e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <alternador_pots>
 582:	8f 5f       	subi	r24, 0xFF	; 255
 584:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <alternador_pots>
 588:	0c c0       	rjmp	.+24     	; 0x5a2 <__vector_21+0xa8>
	} else {
		valorADC_pot4 = ADCH;
 58a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 58e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <valorADC_pot4>
		ADMUX = ((ADMUX & 0xF8)|0x04);
 592:	ec e7       	ldi	r30, 0x7C	; 124
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	88 7f       	andi	r24, 0xF8	; 248
 59a:	84 60       	ori	r24, 0x04	; 4
 59c:	80 83       	st	Z, r24
		alternador_pots = 0;
 59e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <alternador_pots>
	}
	
	ADCSRA |= (1<<ADEN);
 5a2:	ea e7       	ldi	r30, 0x7A	; 122
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 5ac:	80 81       	ld	r24, Z
 5ae:	80 64       	ori	r24, 0x40	; 64
 5b0:	80 83       	st	Z, r24
	//ADCSRA |= (1<<ADIF);
}
 5b2:	ff 91       	pop	r31
 5b4:	ef 91       	pop	r30
 5b6:	8f 91       	pop	r24
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <__vector_18>:

ISR(USART_RX_vect){
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
	bandera_lectura = 1;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	uint8_t i;
	for (i = 0; mensaje_recibido[i] != '\0'; i++){
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	08 c0       	rjmp	.+16     	; 0x5ee <__vector_18+0x2c>
		mensaje_recibido[i] = UDR0;
 5de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5e2:	80 83       	st	Z, r24
		while (!(UCSR0A & (1<<RXC0)));
 5e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5e8:	88 23       	and	r24, r24
 5ea:	e4 f7       	brge	.-8      	; 0x5e4 <__vector_18+0x22>
}

ISR(USART_RX_vect){
	bandera_lectura = 1;
	uint8_t i;
	for (i = 0; mensaje_recibido[i] != '\0'; i++){
 5ec:	9f 5f       	subi	r25, 0xFF	; 255
 5ee:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <mensaje_recibido>
 5f2:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <mensaje_recibido+0x1>
 5f6:	e9 0f       	add	r30, r25
 5f8:	f1 1d       	adc	r31, r1
 5fa:	80 81       	ld	r24, Z
 5fc:	81 11       	cpse	r24, r1
 5fe:	ef cf       	rjmp	.-34     	; 0x5de <__vector_18+0x1c>
		mensaje_recibido[i] = UDR0;
		while (!(UCSR0A & (1<<RXC0)));
	}
	
 600:	ff 91       	pop	r31
 602:	ef 91       	pop	r30
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <init_PWM1_Fast>:
 */ 

#include "PWM1.h"

void init_PWM1_Fast(void){
	DDRB |= (1 << DDB0)|(1 << DDB1)|(1<< DDB2)|(1<<DDB5);
 612:	84 b1       	in	r24, 0x04	; 4
 614:	87 62       	ori	r24, 0x27	; 39
 616:	84 b9       	out	0x04, r24	; 4
	
	PORTB &= ~(1<<PORTB5);
 618:	85 b1       	in	r24, 0x05	; 5
 61a:	8f 7d       	andi	r24, 0xDF	; 223
 61c:	85 b9       	out	0x05, r24	; 5
	
	TCCR1A = 0;
 61e:	e0 e8       	ldi	r30, 0x80	; 128
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	10 82       	st	Z, r1
	TCCR1B = 0;
 624:	a1 e8       	ldi	r26, 0x81	; 129
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	1c 92       	st	X, r1
	TCCR1A |= (1<<COM1A1);
 62a:	80 81       	ld	r24, Z
 62c:	80 68       	ori	r24, 0x80	; 128
 62e:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1B1);
 630:	80 81       	ld	r24, Z
 632:	80 62       	ori	r24, 0x20	; 32
 634:	80 83       	st	Z, r24
	
	TCCR1A |= (1<<WGM11);
 636:	80 81       	ld	r24, Z
 638:	82 60       	ori	r24, 0x02	; 2
 63a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)|(1<<WGM13);
 63c:	8c 91       	ld	r24, X
 63e:	88 61       	ori	r24, 0x18	; 24
 640:	8c 93       	st	X, r24
	
	//PRESCALER DE 64
	TCCR1B |= (1<<CS11)|(1<<CS10);
 642:	8c 91       	ld	r24, X
 644:	83 60       	ori	r24, 0x03	; 3
 646:	8c 93       	st	X, r24
	
	//TOP DE 1249
	ICR1H = 0x09;
 648:	89 e0       	ldi	r24, 0x09	; 9
 64a:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 0xC3;
 64e:	83 ec       	ldi	r24, 0xC3	; 195
 650:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 654:	08 95       	ret

00000656 <updateDutyCycle1A>:
	/*uint8_t temp = duty;
	OCR1AL = temp;
	duty >>= 8;
	temp = duty;
	OCR1AH = temp;*/
	OCR1AH = (duty & 0xFF00) >> 8;
 656:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (duty & 0x00FF);
 65a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 65e:	08 95       	ret

00000660 <updateDutyCycle1B>:
}

void updateDutyCycle1B(uint16_t duty2){
	//OCR1BH = (duty & 0xFF00) >> 8;
	//OCR1BL = (duty & 0x00FF);
	OCR1B = duty2;
 660:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 664:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 668:	08 95       	ret

0000066a <init_PWM2_Fast>:
 */ 

#include "PWM2.h"

void init_PWM2_Fast(void){
	DDRB |= (1 << DDB3);
 66a:	84 b1       	in	r24, 0x04	; 4
 66c:	88 60       	ori	r24, 0x08	; 8
 66e:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<< DDD3);
 670:	8a b1       	in	r24, 0x0a	; 10
 672:	88 60       	ori	r24, 0x08	; 8
 674:	8a b9       	out	0x0a, r24	; 10
	
	TCCR2A = 0;
 676:	e0 eb       	ldi	r30, 0xB0	; 176
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	10 82       	st	Z, r1
	TCCR2B = 0;
 67c:	a1 eb       	ldi	r26, 0xB1	; 177
 67e:	b0 e0       	ldi	r27, 0x00	; 0
 680:	1c 92       	st	X, r1
	TCCR2A |= (1<<COM2A1);
 682:	80 81       	ld	r24, Z
 684:	80 68       	ori	r24, 0x80	; 128
 686:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2B1);
 688:	80 81       	ld	r24, Z
 68a:	80 62       	ori	r24, 0x20	; 32
 68c:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
 68e:	80 81       	ld	r24, Z
 690:	83 60       	ori	r24, 0x03	; 3
 692:	80 83       	st	Z, r24
	
	//PRESCALER DE 1024
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 694:	8c 91       	ld	r24, X
 696:	87 60       	ori	r24, 0x07	; 7
 698:	8c 93       	st	X, r24
 69a:	08 95       	ret

0000069c <updateDutyCycle2A>:
	
}

void updateDutyCycle2A(uint8_t duty){
	OCR2A = duty;
 69c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 6a0:	08 95       	ret

000006a2 <updateDutyCycle2B>:
}

void updateDutyCycle2B(uint8_t duty){
	OCR2B = duty;
 6a2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 6a6:	08 95       	ret

000006a8 <mapADC_PWM_Timer2>:
}

uint8_t mapADC_PWM_Timer2(uint8_t valor_ADC){
	return (uint8_t)(((float)valor_ADC/122)*255);
 6a8:	68 2f       	mov	r22, r24
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatunsisf>
 6b4:	20 e0       	ldi	r18, 0x00	; 0
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	44 ef       	ldi	r20, 0xF4	; 244
 6ba:	52 e4       	ldi	r21, 0x42	; 66
 6bc:	0e 94 14 04 	call	0x828	; 0x828 <__divsf3>
 6c0:	20 e0       	ldi	r18, 0x00	; 0
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	4f e7       	ldi	r20, 0x7F	; 127
 6c6:	53 e4       	ldi	r21, 0x43	; 67
 6c8:	0e 94 43 05 	call	0xa86	; 0xa86 <__mulsf3>
 6cc:	0e 94 86 04 	call	0x90c	; 0x90c <__fixunssfsi>
 6d0:	86 2f       	mov	r24, r22
 6d2:	08 95       	ret

000006d4 <init_UART9600>:
#include "UART.h"

void init_UART9600(void){
	
	// Configurar pines TX y RX
	DDRD &= ~(1<<DDD0);
 6d4:	8a b1       	in	r24, 0x0a	; 10
 6d6:	8e 7f       	andi	r24, 0xFE	; 254
 6d8:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 6da:	8a b1       	in	r24, 0x0a	; 10
 6dc:	82 60       	ori	r24, 0x02	; 2
 6de:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar A modo Fast U2X0 = 1
	UCSR0A = 0;
 6e0:	e0 ec       	ldi	r30, 0xC0	; 192
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0);
 6e6:	80 81       	ld	r24, Z
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	80 83       	st	Z, r24
	
	//Configurar B Habilitar ISR RX
	UCSR0B = 0;
 6ec:	e1 ec       	ldi	r30, 0xC1	; 193
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 6f2:	80 81       	ld	r24, Z
 6f4:	88 69       	ori	r24, 0x98	; 152
 6f6:	80 83       	st	Z, r24
	
	// Paso 4: Configurar C Frame: 8 bits datos, no paridad, 1 bit stop
	UCSR0C = 0;
 6f8:	e2 ec       	ldi	r30, 0xC2	; 194
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 6fe:	80 81       	ld	r24, Z
 700:	86 60       	ori	r24, 0x06	; 6
 702:	80 83       	st	Z, r24
	
	// Baudrate = 9600
	UBRR0 = 103;
 704:	87 e6       	ldi	r24, 0x67	; 103
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 70c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 710:	08 95       	ret

00000712 <writeUART>:
	
}

void writeUART(char caracter){
	while (!(UCSR0A & (1<<UDRE0)));
 712:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 716:	95 ff       	sbrs	r25, 5
 718:	fc cf       	rjmp	.-8      	; 0x712 <writeUART>
	UDR0 = caracter;
 71a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 71e:	08 95       	ret

00000720 <writeTextUART>:
}

void writeTextUART(char* texto){
 720:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i = 0; texto[i] != '\0'; i++){
 722:	20 e0       	ldi	r18, 0x00	; 0
 724:	07 c0       	rjmp	.+14     	; 0x734 <writeTextUART+0x14>
		while (!(UCSR0A & (1<<UDRE0)));
 726:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 72a:	95 ff       	sbrs	r25, 5
 72c:	fc cf       	rjmp	.-8      	; 0x726 <writeTextUART+0x6>
		UDR0 = texto[i];
 72e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0 = caracter;
}

void writeTextUART(char* texto){
	uint8_t i;
	for(i = 0; texto[i] != '\0'; i++){
 732:	2f 5f       	subi	r18, 0xFF	; 255
 734:	fa 01       	movw	r30, r20
 736:	e2 0f       	add	r30, r18
 738:	f1 1d       	adc	r31, r1
 73a:	30 81       	ld	r19, Z
 73c:	31 11       	cpse	r19, r1
 73e:	f3 cf       	rjmp	.-26     	; 0x726 <writeTextUART+0x6>
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = texto[i];
	}
	writeUART(10);
 740:	8a e0       	ldi	r24, 0x0A	; 10
 742:	0e 94 89 03 	call	0x712	; 0x712 <writeUART>
	writeUART(13);
 746:	8d e0       	ldi	r24, 0x0D	; 13
 748:	0e 94 89 03 	call	0x712	; 0x712 <writeUART>
 74c:	08 95       	ret

0000074e <__subsf3>:
 74e:	50 58       	subi	r21, 0x80	; 128

00000750 <__addsf3>:
 750:	bb 27       	eor	r27, r27
 752:	aa 27       	eor	r26, r26
 754:	0e 94 bf 03 	call	0x77e	; 0x77e <__addsf3x>
 758:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_round>
 75c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscA>
 760:	38 f0       	brcs	.+14     	; 0x770 <__addsf3+0x20>
 762:	0e 94 02 05 	call	0xa04	; 0xa04 <__fp_pscB>
 766:	20 f0       	brcs	.+8      	; 0x770 <__addsf3+0x20>
 768:	39 f4       	brne	.+14     	; 0x778 <__addsf3+0x28>
 76a:	9f 3f       	cpi	r25, 0xFF	; 255
 76c:	19 f4       	brne	.+6      	; 0x774 <__addsf3+0x24>
 76e:	26 f4       	brtc	.+8      	; 0x778 <__addsf3+0x28>
 770:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_nan>
 774:	0e f4       	brtc	.+2      	; 0x778 <__addsf3+0x28>
 776:	e0 95       	com	r30
 778:	e7 fb       	bst	r30, 7
 77a:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>

0000077e <__addsf3x>:
 77e:	e9 2f       	mov	r30, r25
 780:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_split3>
 784:	58 f3       	brcs	.-42     	; 0x75c <__addsf3+0xc>
 786:	ba 17       	cp	r27, r26
 788:	62 07       	cpc	r22, r18
 78a:	73 07       	cpc	r23, r19
 78c:	84 07       	cpc	r24, r20
 78e:	95 07       	cpc	r25, r21
 790:	20 f0       	brcs	.+8      	; 0x79a <__addsf3x+0x1c>
 792:	79 f4       	brne	.+30     	; 0x7b2 <__addsf3x+0x34>
 794:	a6 f5       	brtc	.+104    	; 0x7fe <__addsf3x+0x80>
 796:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_zero>
 79a:	0e f4       	brtc	.+2      	; 0x79e <__addsf3x+0x20>
 79c:	e0 95       	com	r30
 79e:	0b 2e       	mov	r0, r27
 7a0:	ba 2f       	mov	r27, r26
 7a2:	a0 2d       	mov	r26, r0
 7a4:	0b 01       	movw	r0, r22
 7a6:	b9 01       	movw	r22, r18
 7a8:	90 01       	movw	r18, r0
 7aa:	0c 01       	movw	r0, r24
 7ac:	ca 01       	movw	r24, r20
 7ae:	a0 01       	movw	r20, r0
 7b0:	11 24       	eor	r1, r1
 7b2:	ff 27       	eor	r31, r31
 7b4:	59 1b       	sub	r21, r25
 7b6:	99 f0       	breq	.+38     	; 0x7de <__addsf3x+0x60>
 7b8:	59 3f       	cpi	r21, 0xF9	; 249
 7ba:	50 f4       	brcc	.+20     	; 0x7d0 <__addsf3x+0x52>
 7bc:	50 3e       	cpi	r21, 0xE0	; 224
 7be:	68 f1       	brcs	.+90     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7c0:	1a 16       	cp	r1, r26
 7c2:	f0 40       	sbci	r31, 0x00	; 0
 7c4:	a2 2f       	mov	r26, r18
 7c6:	23 2f       	mov	r18, r19
 7c8:	34 2f       	mov	r19, r20
 7ca:	44 27       	eor	r20, r20
 7cc:	58 5f       	subi	r21, 0xF8	; 248
 7ce:	f3 cf       	rjmp	.-26     	; 0x7b6 <__addsf3x+0x38>
 7d0:	46 95       	lsr	r20
 7d2:	37 95       	ror	r19
 7d4:	27 95       	ror	r18
 7d6:	a7 95       	ror	r26
 7d8:	f0 40       	sbci	r31, 0x00	; 0
 7da:	53 95       	inc	r21
 7dc:	c9 f7       	brne	.-14     	; 0x7d0 <__addsf3x+0x52>
 7de:	7e f4       	brtc	.+30     	; 0x7fe <__addsf3x+0x80>
 7e0:	1f 16       	cp	r1, r31
 7e2:	ba 0b       	sbc	r27, r26
 7e4:	62 0b       	sbc	r22, r18
 7e6:	73 0b       	sbc	r23, r19
 7e8:	84 0b       	sbc	r24, r20
 7ea:	ba f0       	brmi	.+46     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	a1 f0       	breq	.+40     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7f0:	ff 0f       	add	r31, r31
 7f2:	bb 1f       	adc	r27, r27
 7f4:	66 1f       	adc	r22, r22
 7f6:	77 1f       	adc	r23, r23
 7f8:	88 1f       	adc	r24, r24
 7fa:	c2 f7       	brpl	.-16     	; 0x7ec <__addsf3x+0x6e>
 7fc:	0e c0       	rjmp	.+28     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7fe:	ba 0f       	add	r27, r26
 800:	62 1f       	adc	r22, r18
 802:	73 1f       	adc	r23, r19
 804:	84 1f       	adc	r24, r20
 806:	48 f4       	brcc	.+18     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 808:	87 95       	ror	r24
 80a:	77 95       	ror	r23
 80c:	67 95       	ror	r22
 80e:	b7 95       	ror	r27
 810:	f7 95       	ror	r31
 812:	9e 3f       	cpi	r25, 0xFE	; 254
 814:	08 f0       	brcs	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 816:	b0 cf       	rjmp	.-160    	; 0x778 <__addsf3+0x28>
 818:	93 95       	inc	r25
 81a:	88 0f       	add	r24, r24
 81c:	08 f0       	brcs	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81e:	99 27       	eor	r25, r25
 820:	ee 0f       	add	r30, r30
 822:	97 95       	ror	r25
 824:	87 95       	ror	r24
 826:	08 95       	ret

00000828 <__divsf3>:
 828:	0e 94 28 04 	call	0x850	; 0x850 <__divsf3x>
 82c:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_round>
 830:	0e 94 02 05 	call	0xa04	; 0xa04 <__fp_pscB>
 834:	58 f0       	brcs	.+22     	; 0x84c <__divsf3+0x24>
 836:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscA>
 83a:	40 f0       	brcs	.+16     	; 0x84c <__divsf3+0x24>
 83c:	29 f4       	brne	.+10     	; 0x848 <__divsf3+0x20>
 83e:	5f 3f       	cpi	r21, 0xFF	; 255
 840:	29 f0       	breq	.+10     	; 0x84c <__divsf3+0x24>
 842:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>
 846:	51 11       	cpse	r21, r1
 848:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_szero>
 84c:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_nan>

00000850 <__divsf3x>:
 850:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_split3>
 854:	68 f3       	brcs	.-38     	; 0x830 <__divsf3+0x8>

00000856 <__divsf3_pse>:
 856:	99 23       	and	r25, r25
 858:	b1 f3       	breq	.-20     	; 0x846 <__divsf3+0x1e>
 85a:	55 23       	and	r21, r21
 85c:	91 f3       	breq	.-28     	; 0x842 <__divsf3+0x1a>
 85e:	95 1b       	sub	r25, r21
 860:	55 0b       	sbc	r21, r21
 862:	bb 27       	eor	r27, r27
 864:	aa 27       	eor	r26, r26
 866:	62 17       	cp	r22, r18
 868:	73 07       	cpc	r23, r19
 86a:	84 07       	cpc	r24, r20
 86c:	38 f0       	brcs	.+14     	; 0x87c <__divsf3_pse+0x26>
 86e:	9f 5f       	subi	r25, 0xFF	; 255
 870:	5f 4f       	sbci	r21, 0xFF	; 255
 872:	22 0f       	add	r18, r18
 874:	33 1f       	adc	r19, r19
 876:	44 1f       	adc	r20, r20
 878:	aa 1f       	adc	r26, r26
 87a:	a9 f3       	breq	.-22     	; 0x866 <__divsf3_pse+0x10>
 87c:	35 d0       	rcall	.+106    	; 0x8e8 <__divsf3_pse+0x92>
 87e:	0e 2e       	mov	r0, r30
 880:	3a f0       	brmi	.+14     	; 0x890 <__divsf3_pse+0x3a>
 882:	e0 e8       	ldi	r30, 0x80	; 128
 884:	32 d0       	rcall	.+100    	; 0x8ea <__divsf3_pse+0x94>
 886:	91 50       	subi	r25, 0x01	; 1
 888:	50 40       	sbci	r21, 0x00	; 0
 88a:	e6 95       	lsr	r30
 88c:	00 1c       	adc	r0, r0
 88e:	ca f7       	brpl	.-14     	; 0x882 <__divsf3_pse+0x2c>
 890:	2b d0       	rcall	.+86     	; 0x8e8 <__divsf3_pse+0x92>
 892:	fe 2f       	mov	r31, r30
 894:	29 d0       	rcall	.+82     	; 0x8e8 <__divsf3_pse+0x92>
 896:	66 0f       	add	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	bb 1f       	adc	r27, r27
 89e:	26 17       	cp	r18, r22
 8a0:	37 07       	cpc	r19, r23
 8a2:	48 07       	cpc	r20, r24
 8a4:	ab 07       	cpc	r26, r27
 8a6:	b0 e8       	ldi	r27, 0x80	; 128
 8a8:	09 f0       	breq	.+2      	; 0x8ac <__divsf3_pse+0x56>
 8aa:	bb 0b       	sbc	r27, r27
 8ac:	80 2d       	mov	r24, r0
 8ae:	bf 01       	movw	r22, r30
 8b0:	ff 27       	eor	r31, r31
 8b2:	93 58       	subi	r25, 0x83	; 131
 8b4:	5f 4f       	sbci	r21, 0xFF	; 255
 8b6:	3a f0       	brmi	.+14     	; 0x8c6 <__divsf3_pse+0x70>
 8b8:	9e 3f       	cpi	r25, 0xFE	; 254
 8ba:	51 05       	cpc	r21, r1
 8bc:	78 f0       	brcs	.+30     	; 0x8dc <__divsf3_pse+0x86>
 8be:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>
 8c2:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_szero>
 8c6:	5f 3f       	cpi	r21, 0xFF	; 255
 8c8:	e4 f3       	brlt	.-8      	; 0x8c2 <__divsf3_pse+0x6c>
 8ca:	98 3e       	cpi	r25, 0xE8	; 232
 8cc:	d4 f3       	brlt	.-12     	; 0x8c2 <__divsf3_pse+0x6c>
 8ce:	86 95       	lsr	r24
 8d0:	77 95       	ror	r23
 8d2:	67 95       	ror	r22
 8d4:	b7 95       	ror	r27
 8d6:	f7 95       	ror	r31
 8d8:	9f 5f       	subi	r25, 0xFF	; 255
 8da:	c9 f7       	brne	.-14     	; 0x8ce <__divsf3_pse+0x78>
 8dc:	88 0f       	add	r24, r24
 8de:	91 1d       	adc	r25, r1
 8e0:	96 95       	lsr	r25
 8e2:	87 95       	ror	r24
 8e4:	97 f9       	bld	r25, 7
 8e6:	08 95       	ret
 8e8:	e1 e0       	ldi	r30, 0x01	; 1
 8ea:	66 0f       	add	r22, r22
 8ec:	77 1f       	adc	r23, r23
 8ee:	88 1f       	adc	r24, r24
 8f0:	bb 1f       	adc	r27, r27
 8f2:	62 17       	cp	r22, r18
 8f4:	73 07       	cpc	r23, r19
 8f6:	84 07       	cpc	r24, r20
 8f8:	ba 07       	cpc	r27, r26
 8fa:	20 f0       	brcs	.+8      	; 0x904 <__stack+0x5>
 8fc:	62 1b       	sub	r22, r18
 8fe:	73 0b       	sbc	r23, r19
 900:	84 0b       	sbc	r24, r20
 902:	ba 0b       	sbc	r27, r26
 904:	ee 1f       	adc	r30, r30
 906:	88 f7       	brcc	.-30     	; 0x8ea <__divsf3_pse+0x94>
 908:	e0 95       	com	r30
 90a:	08 95       	ret

0000090c <__fixunssfsi>:
 90c:	0e 94 22 05 	call	0xa44	; 0xa44 <__fp_splitA>
 910:	88 f0       	brcs	.+34     	; 0x934 <__fixunssfsi+0x28>
 912:	9f 57       	subi	r25, 0x7F	; 127
 914:	98 f0       	brcs	.+38     	; 0x93c <__fixunssfsi+0x30>
 916:	b9 2f       	mov	r27, r25
 918:	99 27       	eor	r25, r25
 91a:	b7 51       	subi	r27, 0x17	; 23
 91c:	b0 f0       	brcs	.+44     	; 0x94a <__fixunssfsi+0x3e>
 91e:	e1 f0       	breq	.+56     	; 0x958 <__fixunssfsi+0x4c>
 920:	66 0f       	add	r22, r22
 922:	77 1f       	adc	r23, r23
 924:	88 1f       	adc	r24, r24
 926:	99 1f       	adc	r25, r25
 928:	1a f0       	brmi	.+6      	; 0x930 <__fixunssfsi+0x24>
 92a:	ba 95       	dec	r27
 92c:	c9 f7       	brne	.-14     	; 0x920 <__fixunssfsi+0x14>
 92e:	14 c0       	rjmp	.+40     	; 0x958 <__fixunssfsi+0x4c>
 930:	b1 30       	cpi	r27, 0x01	; 1
 932:	91 f0       	breq	.+36     	; 0x958 <__fixunssfsi+0x4c>
 934:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_zero>
 938:	b1 e0       	ldi	r27, 0x01	; 1
 93a:	08 95       	ret
 93c:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_zero>
 940:	67 2f       	mov	r22, r23
 942:	78 2f       	mov	r23, r24
 944:	88 27       	eor	r24, r24
 946:	b8 5f       	subi	r27, 0xF8	; 248
 948:	39 f0       	breq	.+14     	; 0x958 <__fixunssfsi+0x4c>
 94a:	b9 3f       	cpi	r27, 0xF9	; 249
 94c:	cc f3       	brlt	.-14     	; 0x940 <__fixunssfsi+0x34>
 94e:	86 95       	lsr	r24
 950:	77 95       	ror	r23
 952:	67 95       	ror	r22
 954:	b3 95       	inc	r27
 956:	d9 f7       	brne	.-10     	; 0x94e <__fixunssfsi+0x42>
 958:	3e f4       	brtc	.+14     	; 0x968 <__fixunssfsi+0x5c>
 95a:	90 95       	com	r25
 95c:	80 95       	com	r24
 95e:	70 95       	com	r23
 960:	61 95       	neg	r22
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	08 95       	ret

0000096a <__floatunsisf>:
 96a:	e8 94       	clt
 96c:	09 c0       	rjmp	.+18     	; 0x980 <__floatsisf+0x12>

0000096e <__floatsisf>:
 96e:	97 fb       	bst	r25, 7
 970:	3e f4       	brtc	.+14     	; 0x980 <__floatsisf+0x12>
 972:	90 95       	com	r25
 974:	80 95       	com	r24
 976:	70 95       	com	r23
 978:	61 95       	neg	r22
 97a:	7f 4f       	sbci	r23, 0xFF	; 255
 97c:	8f 4f       	sbci	r24, 0xFF	; 255
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	99 23       	and	r25, r25
 982:	a9 f0       	breq	.+42     	; 0x9ae <__floatsisf+0x40>
 984:	f9 2f       	mov	r31, r25
 986:	96 e9       	ldi	r25, 0x96	; 150
 988:	bb 27       	eor	r27, r27
 98a:	93 95       	inc	r25
 98c:	f6 95       	lsr	r31
 98e:	87 95       	ror	r24
 990:	77 95       	ror	r23
 992:	67 95       	ror	r22
 994:	b7 95       	ror	r27
 996:	f1 11       	cpse	r31, r1
 998:	f8 cf       	rjmp	.-16     	; 0x98a <__floatsisf+0x1c>
 99a:	fa f4       	brpl	.+62     	; 0x9da <__floatsisf+0x6c>
 99c:	bb 0f       	add	r27, r27
 99e:	11 f4       	brne	.+4      	; 0x9a4 <__floatsisf+0x36>
 9a0:	60 ff       	sbrs	r22, 0
 9a2:	1b c0       	rjmp	.+54     	; 0x9da <__floatsisf+0x6c>
 9a4:	6f 5f       	subi	r22, 0xFF	; 255
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	8f 4f       	sbci	r24, 0xFF	; 255
 9aa:	9f 4f       	sbci	r25, 0xFF	; 255
 9ac:	16 c0       	rjmp	.+44     	; 0x9da <__floatsisf+0x6c>
 9ae:	88 23       	and	r24, r24
 9b0:	11 f0       	breq	.+4      	; 0x9b6 <__floatsisf+0x48>
 9b2:	96 e9       	ldi	r25, 0x96	; 150
 9b4:	11 c0       	rjmp	.+34     	; 0x9d8 <__floatsisf+0x6a>
 9b6:	77 23       	and	r23, r23
 9b8:	21 f0       	breq	.+8      	; 0x9c2 <__floatsisf+0x54>
 9ba:	9e e8       	ldi	r25, 0x8E	; 142
 9bc:	87 2f       	mov	r24, r23
 9be:	76 2f       	mov	r23, r22
 9c0:	05 c0       	rjmp	.+10     	; 0x9cc <__floatsisf+0x5e>
 9c2:	66 23       	and	r22, r22
 9c4:	71 f0       	breq	.+28     	; 0x9e2 <__floatsisf+0x74>
 9c6:	96 e8       	ldi	r25, 0x86	; 134
 9c8:	86 2f       	mov	r24, r22
 9ca:	70 e0       	ldi	r23, 0x00	; 0
 9cc:	60 e0       	ldi	r22, 0x00	; 0
 9ce:	2a f0       	brmi	.+10     	; 0x9da <__floatsisf+0x6c>
 9d0:	9a 95       	dec	r25
 9d2:	66 0f       	add	r22, r22
 9d4:	77 1f       	adc	r23, r23
 9d6:	88 1f       	adc	r24, r24
 9d8:	da f7       	brpl	.-10     	; 0x9d0 <__floatsisf+0x62>
 9da:	88 0f       	add	r24, r24
 9dc:	96 95       	lsr	r25
 9de:	87 95       	ror	r24
 9e0:	97 f9       	bld	r25, 7
 9e2:	08 95       	ret

000009e4 <__fp_inf>:
 9e4:	97 f9       	bld	r25, 7
 9e6:	9f 67       	ori	r25, 0x7F	; 127
 9e8:	80 e8       	ldi	r24, 0x80	; 128
 9ea:	70 e0       	ldi	r23, 0x00	; 0
 9ec:	60 e0       	ldi	r22, 0x00	; 0
 9ee:	08 95       	ret

000009f0 <__fp_nan>:
 9f0:	9f ef       	ldi	r25, 0xFF	; 255
 9f2:	80 ec       	ldi	r24, 0xC0	; 192
 9f4:	08 95       	ret

000009f6 <__fp_pscA>:
 9f6:	00 24       	eor	r0, r0
 9f8:	0a 94       	dec	r0
 9fa:	16 16       	cp	r1, r22
 9fc:	17 06       	cpc	r1, r23
 9fe:	18 06       	cpc	r1, r24
 a00:	09 06       	cpc	r0, r25
 a02:	08 95       	ret

00000a04 <__fp_pscB>:
 a04:	00 24       	eor	r0, r0
 a06:	0a 94       	dec	r0
 a08:	12 16       	cp	r1, r18
 a0a:	13 06       	cpc	r1, r19
 a0c:	14 06       	cpc	r1, r20
 a0e:	05 06       	cpc	r0, r21
 a10:	08 95       	ret

00000a12 <__fp_round>:
 a12:	09 2e       	mov	r0, r25
 a14:	03 94       	inc	r0
 a16:	00 0c       	add	r0, r0
 a18:	11 f4       	brne	.+4      	; 0xa1e <__fp_round+0xc>
 a1a:	88 23       	and	r24, r24
 a1c:	52 f0       	brmi	.+20     	; 0xa32 <__fp_round+0x20>
 a1e:	bb 0f       	add	r27, r27
 a20:	40 f4       	brcc	.+16     	; 0xa32 <__fp_round+0x20>
 a22:	bf 2b       	or	r27, r31
 a24:	11 f4       	brne	.+4      	; 0xa2a <__fp_round+0x18>
 a26:	60 ff       	sbrs	r22, 0
 a28:	04 c0       	rjmp	.+8      	; 0xa32 <__fp_round+0x20>
 a2a:	6f 5f       	subi	r22, 0xFF	; 255
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	8f 4f       	sbci	r24, 0xFF	; 255
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	08 95       	ret

00000a34 <__fp_split3>:
 a34:	57 fd       	sbrc	r21, 7
 a36:	90 58       	subi	r25, 0x80	; 128
 a38:	44 0f       	add	r20, r20
 a3a:	55 1f       	adc	r21, r21
 a3c:	59 f0       	breq	.+22     	; 0xa54 <__fp_splitA+0x10>
 a3e:	5f 3f       	cpi	r21, 0xFF	; 255
 a40:	71 f0       	breq	.+28     	; 0xa5e <__fp_splitA+0x1a>
 a42:	47 95       	ror	r20

00000a44 <__fp_splitA>:
 a44:	88 0f       	add	r24, r24
 a46:	97 fb       	bst	r25, 7
 a48:	99 1f       	adc	r25, r25
 a4a:	61 f0       	breq	.+24     	; 0xa64 <__fp_splitA+0x20>
 a4c:	9f 3f       	cpi	r25, 0xFF	; 255
 a4e:	79 f0       	breq	.+30     	; 0xa6e <__fp_splitA+0x2a>
 a50:	87 95       	ror	r24
 a52:	08 95       	ret
 a54:	12 16       	cp	r1, r18
 a56:	13 06       	cpc	r1, r19
 a58:	14 06       	cpc	r1, r20
 a5a:	55 1f       	adc	r21, r21
 a5c:	f2 cf       	rjmp	.-28     	; 0xa42 <__fp_split3+0xe>
 a5e:	46 95       	lsr	r20
 a60:	f1 df       	rcall	.-30     	; 0xa44 <__fp_splitA>
 a62:	08 c0       	rjmp	.+16     	; 0xa74 <__fp_splitA+0x30>
 a64:	16 16       	cp	r1, r22
 a66:	17 06       	cpc	r1, r23
 a68:	18 06       	cpc	r1, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	f1 cf       	rjmp	.-30     	; 0xa50 <__fp_splitA+0xc>
 a6e:	86 95       	lsr	r24
 a70:	71 05       	cpc	r23, r1
 a72:	61 05       	cpc	r22, r1
 a74:	08 94       	sec
 a76:	08 95       	ret

00000a78 <__fp_zero>:
 a78:	e8 94       	clt

00000a7a <__fp_szero>:
 a7a:	bb 27       	eor	r27, r27
 a7c:	66 27       	eor	r22, r22
 a7e:	77 27       	eor	r23, r23
 a80:	cb 01       	movw	r24, r22
 a82:	97 f9       	bld	r25, 7
 a84:	08 95       	ret

00000a86 <__mulsf3>:
 a86:	0e 94 56 05 	call	0xaac	; 0xaac <__mulsf3x>
 a8a:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_round>
 a8e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscA>
 a92:	38 f0       	brcs	.+14     	; 0xaa2 <__mulsf3+0x1c>
 a94:	0e 94 02 05 	call	0xa04	; 0xa04 <__fp_pscB>
 a98:	20 f0       	brcs	.+8      	; 0xaa2 <__mulsf3+0x1c>
 a9a:	95 23       	and	r25, r21
 a9c:	11 f0       	breq	.+4      	; 0xaa2 <__mulsf3+0x1c>
 a9e:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>
 aa2:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_nan>
 aa6:	11 24       	eor	r1, r1
 aa8:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_szero>

00000aac <__mulsf3x>:
 aac:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_split3>
 ab0:	70 f3       	brcs	.-36     	; 0xa8e <__mulsf3+0x8>

00000ab2 <__mulsf3_pse>:
 ab2:	95 9f       	mul	r25, r21
 ab4:	c1 f3       	breq	.-16     	; 0xaa6 <__mulsf3+0x20>
 ab6:	95 0f       	add	r25, r21
 ab8:	50 e0       	ldi	r21, 0x00	; 0
 aba:	55 1f       	adc	r21, r21
 abc:	62 9f       	mul	r22, r18
 abe:	f0 01       	movw	r30, r0
 ac0:	72 9f       	mul	r23, r18
 ac2:	bb 27       	eor	r27, r27
 ac4:	f0 0d       	add	r31, r0
 ac6:	b1 1d       	adc	r27, r1
 ac8:	63 9f       	mul	r22, r19
 aca:	aa 27       	eor	r26, r26
 acc:	f0 0d       	add	r31, r0
 ace:	b1 1d       	adc	r27, r1
 ad0:	aa 1f       	adc	r26, r26
 ad2:	64 9f       	mul	r22, r20
 ad4:	66 27       	eor	r22, r22
 ad6:	b0 0d       	add	r27, r0
 ad8:	a1 1d       	adc	r26, r1
 ada:	66 1f       	adc	r22, r22
 adc:	82 9f       	mul	r24, r18
 ade:	22 27       	eor	r18, r18
 ae0:	b0 0d       	add	r27, r0
 ae2:	a1 1d       	adc	r26, r1
 ae4:	62 1f       	adc	r22, r18
 ae6:	73 9f       	mul	r23, r19
 ae8:	b0 0d       	add	r27, r0
 aea:	a1 1d       	adc	r26, r1
 aec:	62 1f       	adc	r22, r18
 aee:	83 9f       	mul	r24, r19
 af0:	a0 0d       	add	r26, r0
 af2:	61 1d       	adc	r22, r1
 af4:	22 1f       	adc	r18, r18
 af6:	74 9f       	mul	r23, r20
 af8:	33 27       	eor	r19, r19
 afa:	a0 0d       	add	r26, r0
 afc:	61 1d       	adc	r22, r1
 afe:	23 1f       	adc	r18, r19
 b00:	84 9f       	mul	r24, r20
 b02:	60 0d       	add	r22, r0
 b04:	21 1d       	adc	r18, r1
 b06:	82 2f       	mov	r24, r18
 b08:	76 2f       	mov	r23, r22
 b0a:	6a 2f       	mov	r22, r26
 b0c:	11 24       	eor	r1, r1
 b0e:	9f 57       	subi	r25, 0x7F	; 127
 b10:	50 40       	sbci	r21, 0x00	; 0
 b12:	9a f0       	brmi	.+38     	; 0xb3a <__mulsf3_pse+0x88>
 b14:	f1 f0       	breq	.+60     	; 0xb52 <__mulsf3_pse+0xa0>
 b16:	88 23       	and	r24, r24
 b18:	4a f0       	brmi	.+18     	; 0xb2c <__mulsf3_pse+0x7a>
 b1a:	ee 0f       	add	r30, r30
 b1c:	ff 1f       	adc	r31, r31
 b1e:	bb 1f       	adc	r27, r27
 b20:	66 1f       	adc	r22, r22
 b22:	77 1f       	adc	r23, r23
 b24:	88 1f       	adc	r24, r24
 b26:	91 50       	subi	r25, 0x01	; 1
 b28:	50 40       	sbci	r21, 0x00	; 0
 b2a:	a9 f7       	brne	.-22     	; 0xb16 <__mulsf3_pse+0x64>
 b2c:	9e 3f       	cpi	r25, 0xFE	; 254
 b2e:	51 05       	cpc	r21, r1
 b30:	80 f0       	brcs	.+32     	; 0xb52 <__mulsf3_pse+0xa0>
 b32:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>
 b36:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_szero>
 b3a:	5f 3f       	cpi	r21, 0xFF	; 255
 b3c:	e4 f3       	brlt	.-8      	; 0xb36 <__mulsf3_pse+0x84>
 b3e:	98 3e       	cpi	r25, 0xE8	; 232
 b40:	d4 f3       	brlt	.-12     	; 0xb36 <__mulsf3_pse+0x84>
 b42:	86 95       	lsr	r24
 b44:	77 95       	ror	r23
 b46:	67 95       	ror	r22
 b48:	b7 95       	ror	r27
 b4a:	f7 95       	ror	r31
 b4c:	e7 95       	ror	r30
 b4e:	9f 5f       	subi	r25, 0xFF	; 255
 b50:	c1 f7       	brne	.-16     	; 0xb42 <__mulsf3_pse+0x90>
 b52:	fe 2b       	or	r31, r30
 b54:	88 0f       	add	r24, r24
 b56:	91 1d       	adc	r25, r1
 b58:	96 95       	lsr	r25
 b5a:	87 95       	ror	r24
 b5c:	97 f9       	bld	r25, 7
 b5e:	08 95       	ret

00000b60 <eeprom_read_byte>:
 b60:	f9 99       	sbic	0x1f, 1	; 31
 b62:	fe cf       	rjmp	.-4      	; 0xb60 <eeprom_read_byte>
 b64:	92 bd       	out	0x22, r25	; 34
 b66:	81 bd       	out	0x21, r24	; 33
 b68:	f8 9a       	sbi	0x1f, 0	; 31
 b6a:	99 27       	eor	r25, r25
 b6c:	80 b5       	in	r24, 0x20	; 32
 b6e:	08 95       	ret

00000b70 <eeprom_update_byte>:
 b70:	26 2f       	mov	r18, r22

00000b72 <eeprom_update_r18>:
 b72:	f9 99       	sbic	0x1f, 1	; 31
 b74:	fe cf       	rjmp	.-4      	; 0xb72 <eeprom_update_r18>
 b76:	92 bd       	out	0x22, r25	; 34
 b78:	81 bd       	out	0x21, r24	; 33
 b7a:	f8 9a       	sbi	0x1f, 0	; 31
 b7c:	01 97       	sbiw	r24, 0x01	; 1
 b7e:	00 b4       	in	r0, 0x20	; 32
 b80:	02 16       	cp	r0, r18
 b82:	39 f0       	breq	.+14     	; 0xb92 <eeprom_update_r18+0x20>
 b84:	1f ba       	out	0x1f, r1	; 31
 b86:	20 bd       	out	0x20, r18	; 32
 b88:	0f b6       	in	r0, 0x3f	; 63
 b8a:	f8 94       	cli
 b8c:	fa 9a       	sbi	0x1f, 2	; 31
 b8e:	f9 9a       	sbi	0x1f, 1	; 31
 b90:	0f be       	out	0x3f, r0	; 63
 b92:	08 95       	ret

00000b94 <_exit>:
 b94:	f8 94       	cli

00000b96 <__stop_program>:
 b96:	ff cf       	rjmp	.-2      	; 0xb96 <__stop_program>
